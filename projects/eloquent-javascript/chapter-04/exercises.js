////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// create array to populate with numbers
// set base case to start === end
// call function again with args of start + step, end, step


function range(start, end, step = 1) {
  let numbers = []; // create array to hold range
  if (start === end) { // check if start is already equal to end
    return numbers; // if so return empty array
  }
  if (step >= 0) { // check if step is 0 or greater
    for (let i = start; i <= end; i += step) { // if so loop thru numbers incrementing by step each time
      numbers.push(i); // push each value into array
    }
  } else if (step < 0) { // check if step is negative
    return numbers; // if so return empty array
  }
  return numbers; // return array populated with range
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(arr) {
  if (arr.length === 0) { // check if array is empty
    return 0; // if so return 0
  }
  if (arr.length === 1) { // check if array has one element left
    return arr[0]; // if so return that element
  }
  return arr[0] + sum(arr.slice(1)); // otherwise return sum of current element plus result of invoking function on rest of array
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(arr) {
  let reversed = []; // create holder array
  for (let i = arr.length - 1; i >= 0; i--) { // loop thru array in reverse
    reversed.push(arr[i]); // push each value to holder
  }
  return reversed; // return holder
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(arr) {
  for (let i = 0; i < arr.length; i++) { // loop thru array
   arr.splice(i, 0, arr.pop()); // set current val of i to last element in array on each iteration
  }
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList() {

}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray() {

}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend() {

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth() {

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual() {

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
